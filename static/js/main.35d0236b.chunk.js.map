{"version":3,"sources":["components/layout/NavBar.js","pages/home/Home.js","pages/home/Contact.js","pages/ipgeoinfo/IPGeoInfo.js","App.js","utils/theme.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","menuItem","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","Navbar","classes","useTheme","React","useState","open","setOpen","navMenuItems","name","link","className","CssBaseline","AppBar","position","clsx","color","Toolbar","IconButton","aria-label","onClick","edge","MenuItem","component","Link","to","key","Typography","variant","map","item","index","Drawer","anchor","paper","direction","Divider","List","ListItem","button","ListItemText","primary","Home","Contact","IPGeoInfo","activeIPInfo","setActiveIPInfo","lat","setLat","lng","setLng","useEffect","fetch","then","res","json","result","lon","error","console","log","Map","center","zoom","TileLayer","url","attribution","Marker","Popup","onClose","query","isp","org","timezone","regionName","city","country","createMuiTheme","palette","light","main","dark","contrastText","secondary","App","basename","Container","maxWidth","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.35d0236b.chunk.js","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    display: 'block',\r\n    '@media (min-width:780px)': {\r\n      display: 'none',\r\n    },\r\n  },\r\n  menuItem: {\r\n    display: 'none',\r\n    '@media (min-width:780px)': {\r\n      display: 'block',\r\n    },\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function Navbar() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const navMenuItems = [\r\n    {name: 'Contact', link: '/contact'},\r\n    {name: 'IP', link: '/ipgeoinfo'},\r\n  ];\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position='fixed'\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n        color='secondary'\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color='inherit'\r\n            aria-label='open drawer'\r\n            onClick={handleDrawerOpen}\r\n            edge='start'\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n\r\n          <MenuItem component={Link} to='/' key='title'>\r\n            <Typography variant='h6' color='inherit'>\r\n              Code Playground\r\n            </Typography>\r\n          </MenuItem>\r\n\r\n          {navMenuItems.map((item, index) => (\r\n            <MenuItem\r\n              component={Link}\r\n              className={classes.menuItem}\r\n              to={item.link}\r\n              key={item.name}\r\n            >\r\n              {item.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant='persistent'\r\n        anchor='left'\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? (\r\n              <ChevronLeftIcon />\r\n            ) : (\r\n              <ChevronRightIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {navMenuItems.map((item, index) => (\r\n            <ListItem button component={Link} to={item.link} key={item.name}>\r\n              <ListItemText primary={item.name} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>Home</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div>\r\n      <h1>Contact</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Map, Marker, Popup, TileLayer} from 'react-leaflet';\r\n\r\nconst IPGeoInfo = () => {\r\n  const [activeIPInfo, setActiveIPInfo] = useState(null);\r\n  const [lat, setLat] = useState(22.302711);\r\n  const [lng, setLng] = useState(114.177216);\r\n\r\n  useEffect(() => {\r\n    fetch('https://powertoys.vercel.app/geoipservices/')\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setLat(result.lat);\r\n          setLng(result.lon);\r\n          setActiveIPInfo(result);\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        },\r\n      );\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Map center={[lat, lng]} zoom={13}>\r\n        <TileLayer\r\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {activeIPInfo != null ? (\r\n          <Marker\r\n            position={[activeIPInfo.lat, activeIPInfo.lon]}\r\n            onClick={() => {\r\n              setActiveIPInfo(activeIPInfo);\r\n            }}\r\n          >\r\n            <Popup\r\n              position={[activeIPInfo.lat, activeIPInfo.lon]}\r\n              onClose={() => {\r\n                setActiveIPInfo(activeIPInfo);\r\n              }}\r\n            >\r\n              <div>\r\n                <h2>{activeIPInfo.query}</h2>\r\n                <table>\r\n                  <tbody>\r\n                    <tr>\r\n                      <th>ISP</th>\r\n                      <td>{activeIPInfo.isp}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Organisation</th>\r\n                      <td>{activeIPInfo.org}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Lat</th>\r\n                      <td>{activeIPInfo.lat}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Lng</th>\r\n                      <td>{activeIPInfo.lon}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>timezone</th>\r\n                      <td>{activeIPInfo.timezone}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Region Name</th>\r\n                      <td>{activeIPInfo.regionName}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>City</th>\r\n                      <td>{activeIPInfo.city}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Country</th>\r\n                      <td>{activeIPInfo.country}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        ) : null}\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IPGeoInfo;\r\n","import React from 'react';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\nimport Container from '@material-ui/core/Container';\r\nimport {ThemeProvider as MuiThemeProvider} from '@material-ui/core/styles';\r\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\n\r\n// Component\r\nimport NavBar from './components/layout/NavBar';\r\nimport Home from './pages/home/Home';\r\nimport Contact from './pages/home/Contact';\r\nimport IPGeoInfo from './pages/ipgeoinfo/IPGeoInfo';\r\n\r\n// style\r\nimport './App.css';\r\nimport themeStyles from './utils/theme';\r\n\r\nconst theme = createMuiTheme(themeStyles);\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className='App'>\r\n      <MuiThemeProvider theme={theme}>\r\n        <BrowserRouter basename='/code-playground'>\r\n          <NavBar />\r\n          <Container maxWidth='xl' className='main-container'>\r\n            <Switch>\r\n              <Route exact path='/' component={Home} />\r\n              <Route exact path='/contact' component={Contact} />\r\n              <Route exact path='/ipgeoinfo' component={IPGeoInfo} />\r\n            </Switch>\r\n          </Container>\r\n        </BrowserRouter>\r\n      </MuiThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export default {\r\n  palette: {\r\n    primary: {\r\n      light: '#757ce8',\r\n      main: '#3f50b5',\r\n      dark: '#002884',\r\n      contrastText: '#fff',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#f44336',\r\n      dark: '#ba000d',\r\n      contrastText: '#fff',\r\n    },\r\n  },\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}